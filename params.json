{"name":"els","tagline":"Emoji + ls = els A wrapper script for ls to get icons alongside file names on the terminal.","body":"els = ls with emoji icons\r\n-------------------------\r\n\r\nThis is a simple wrapper for `ls` written in ruby to display emoji icons\r\nalongside file names. It was written and tested on MacOS X which uses the BSD\r\nversion of ls. It will also work with the GNU ls.\r\n\r\nAll arguments are passed along to ls with the exception of --els-no-color which\r\ndisables the built in color handling.\r\n\r\n[![](http://anthonydigirolamo.github.io/els/screen1.png)](http://anthonydigirolamo.github.io/els/screen1.png)\r\n[![](http://anthonydigirolamo.github.io/els/screen2.png)](http://anthonydigirolamo.github.io/els/screen2.png)\r\n[![](http://anthonydigirolamo.github.io/els/screen3.png)](http://anthonydigirolamo.github.io/els/screen3.png)\r\n[![](http://anthonydigirolamo.github.io/els/screen4.png)](http://anthonydigirolamo.github.io/els/screen4.png)\r\n\r\n### Installation\r\n\r\n    curl -O https://raw.github.com/AnthonyDiGirolamo/els/master/els\r\n    chmod +x els\r\n\r\nThen place it somewhere in your `$PATH`\r\n\r\n### Colors\r\n\r\n`els` honors the `$LS_COLORS` environment variable and expects the GNU format\r\n(not BSD!). This is usually set by the `dircolors` command in Linux. If\r\n`$LS_COLORS` is not set `els` will use a default setting. This lets you use OSXs\r\ndefault BSD `ls` but still the GNU `$LS_COLORS` features.\r\n\r\nIf you want the GNU version of `ls` on OSX use [homebrew](brew.sh) to install\r\ncoreutils. It will then be available as `gls`. (This isn't required).\r\n\r\n    brew install coreutils\r\n\r\n### Adding/Changing Icons\r\n\r\nYou can add your own icons and extensions by editing the source. Fork this repo\r\nand send me a pull request if you do so everyone can enjoy your changes. Here is\r\nthe current setting:\r\n\r\n    FileTypes = {\r\n      :executable => {\r\n        :icon       => 'ðŸš€',\r\n        :extensions => %w{ex} },\r\n      :link => {\r\n        :icon       => 'ðŸ”—',\r\n        :extensions => %w{ln} },\r\n      :directory => {\r\n        :icon       => 'ðŸ“‚',\r\n        :extensions => %w{di} },\r\n      :fifo => {\r\n        :icon       => 'ðŸš¿',\r\n        :extensions => %w{pi} },\r\n      :socket => {\r\n        :icon       => 'ðŸ”Œ',\r\n        :extensions => %w{so} },\r\n      :archive => {\r\n        :icon       => 'ðŸ“¦',\r\n        :extensions => %w{tar tgz arj taz lzh lzma tlz txz zip z Z dz gz lz xz bz2 bz tbz tbz2 tz deb rpm jzr war ear sar rar ace zoo cpio 7z rz} },\r\n      :cd => {\r\n        :icon       => 'ðŸ’¿',\r\n        :extensions => %w{dmg iso cue img} },\r\n      :pdf => {\r\n        :icon       => 'ðŸ“•',\r\n        :extensions => %w{pdf} },\r\n      :image => {\r\n        :icon       => 'ðŸ—»',\r\n        :extensions => %w{gif tiff jpg jpeg png} },\r\n      :text => {\r\n        :icon       => 'ðŸ“„',\r\n        :extensions => %w{txt} },\r\n      :sound => {\r\n        :icon       => 'ðŸ”ˆ',\r\n        :extensions => %w{mp3 wav ogg aiff} },\r\n      :movie => {\r\n        :icon       => 'ðŸ“º',\r\n        :extensions => %w{mp4 avi mkv mov} },\r\n      :blank => {\r\n        :icon       => ' ',\r\n        :extensions => %w{} },\r\n    }\r\n\r\n### Notes on implementation\r\n\r\nThis script started out using lots of regexes but that turned out to be very\r\nslow. Now simple string matching is used to detect extensions and `ls -F`\r\nclassifiers.\r\n\r\nThe column formatting tries to reduce the amount of horizontal whitespace and\r\nmaximize the number of columns. Using `-l` will disable it of course.\r\n\r\n","google":"UA-38580803-1","note":"Don't delete this file! It's used internally to help with page regeneration."}